#!/bin/bash

FPKGDIR="/usr/local/fpkg/" # where all packages are located at
EDITOR="vim"               # change this to your favorite editor

VERSION="2.1.1"            # not sure why i want a variable for that honestly

quit () {
	popd > /dev/null # restore user's working directory
	stty echo        # unhide their keystrokes
	exit $1          # exit with a given code
}

error () {
	echo "ERROR: $1" # use argument as the error message
	quit 1           # exit with error
}

exist_check () {
	if [[ -z $1 ]]; then
		error "package name was not provided!"
	fi

	grep -w $1 pkg.list > /dev/null 2>&1
	if [[ $? > 0 ]]; then
		error "$1 not found in pkg.list! Was it a typo?"
	fi
}

write_check () {
	# get return code to see if we can write to any of the files
	touch $FPKGDIR > /dev/null 2>&1
	ret=$((ret + $?))
	touch $FPKGDIR/pkg.list > /dev/null 2>&1
	ret=$((ret + $?))
	touch $FPKGDIR/ii > /dev/null 2>&1
	ret=$((ret + $?))

	if [[ $ret > 0 ]]; then # if any of the touch's fail
		error "you cannot write to $FPKGDIR! Please run as root!"
	fi
}

# check if $FPKGDIR exists in the first place
if [[ ! -d $FPKGDIR ]]; then
	stty echo
	echo "ERROR: $FPKGDIR does not exist! Create it now? [Y/n]"
	read choice

	if [[ $choice != "n" ]]; then # so that the default is "yes"
		mkdir -pv $FPKGDIR/ii     # create the ii one too already
	fi

	quit 1
fi

# hide keystrokes, save current directory to go to $FPKGDIR
stty -echo
pushd . > /dev/null
cd $FPKGDIR

case $1 in
	# refresh every package using git pull
	"update" | "u")
		entries=$(cat pkg.list | wc -l) # how many packages do we have?

		for ((i = 1; i <= $entries; i++)); do
			pkg_dir=$(head -n $i pkg.list | tail -1)
			cd $pkg_dir > /dev/null 2>&1
					
			if [[ $? != 0 ]]; then
				error "$pkg_dir does not exist! Remove its entry
				       with 'fpkg delete' and try again. Aborting..."
			fi

			echo "$pkg_dir:"
			git pull --recurse-submodules # where the update itself happens
			cd - > /dev/null
		done
		;;

	# requested the installation of a package?
	"install" | "i")
		exist_check $2

		cd $2

		$FPKGDIR/ii/$2.ii install
		;;

	# requested the uninstallation of a package?
	"remove" | "r")
		exist_check $2

		cd $2

		$FPKGDIR/ii/$2.ii remove
		;;

	# requested the list of registered packages?
	"list" | "l")
		cat pkg.list
		echo -e \\n"Total: $(cat pkg.list | wc -l)" # see how many packages we have too
		;;

	# adding an entry to the list?
	"add" | "a")
		write_check

		if [[ -z $1 ]]; then
			error "package name was not provided!"
		fi

		# make keystrokes visible again
		stty echo
		
		# add the package to the list
		echo $2 >> pkg.list

		# write a template for it to make it easier for the user
		echo -e "# Installation instructions for package $2"\\n  >  ii/$2.ii
		echo    "# Inside install (), write the commands for"    >> ii/$2.ii
		echo    "# installing the package,"                      >> ii/$2.ii
		echo    "# and inside remove (), write the commands for" >> ii/$2.ii
		echo -e "# uninstalling it too."\\n                      >> ii/$2.ii

		# write a commented out privilege check section so that if
		# there're any steps requiring elevated privileges a check
		# is made for it
		echo -e "#if [[ \$(whoami) != \"root\" ]]; then"             >> ii/$2.ii
		echo -e "#\\techo \"This action requires root privileges!\"" >> ii/$2.ii
		echo -e "#\\texit 1"                                         >> ii/$2.ii
		echo -e "#fi"\\n                                             >> ii/$2.ii

		echo -e "install () {"\\n\\n"}"\\n >> ii/$2.ii
		echo -e "remove () {"\\n\\n"}"\\n  >> ii/$2.ii

		# this is necessary for being able to call one of the functions when needed
		echo "call=\$1; \$call" >> ii/$2.ii

		# open up the text editor so that the user can write on
		# that template
		$EDITOR ii/$2.ii

		# finally, make it executable so that fpkg can run it
		chmod +x ii/$2.ii
		;;

	# just checking the .ii?
	"peek" | "p")
		exist_check $2

		cat ii/$2.ii
		;;

	# going to the package's directory?
	"goto" | "g")
		# see if we even have the .bashrc to begin with
		if [[ ! -r $FPKGDIR/.bashrc ]]; then
			error "your \$FPKGDIR doesn't have an existing or readable .bashrc!"
		fi

		stty echo
	
		exist_check $2

		export FPKGDIR    # those are necessary to make it able to start the
		export PKG_DIR=$2 # shell at the desired directory

		sh -c 'cd $FPKGDIR/$PKG_DIR;                    # change to the directory
		       echo "Working on $PKG_DIR/, ^D to exit"; # make the user aware of it
			   exec bash --rcfile $FPKGDIR/.bashrc'     # and here it goes
		;;

	# editing a package's .ii?
	"edit" | "e")
		write_check

		exist_check $2

		stty echo

		$EDITOR ii/$2.ii
		;;

	# delete an entry from the list?
	"delete" | "d")
		write_check

		exist_check $2

		stty echo
		entry=$(grep -w "^$2" pkg.list -n | awk -F: '{ print $1 }') # get index of the package
		sed -i "$entry"d pkg.list
		rm ii/$2.ii
		echo "$2 removed from pkg.list, would you like to remove its files as well? [y/N]"
		read choice

		if [[ $choice = 'y' ]]; then # same thing but with "no"
			echo "Package directory (relative to $FPKGDIR):"
			read dir
			rm -rf $dir
		fi
		;;

	# requested the message of last git commit?
	"message" | "m")
		if [[ $2 = "-d" ]]; then
			shift
		fi

		exist_check $2
		cd $2

		# and its diff?
		if [[ $1 = "-d" ]]; then
			git show
		else
			echo $(git log -1 --pretty=%B)
		fi
		;;

	# requested the version?
	"version" | "v")
		echo "fpkg - version $VERSION"
		echo "2024 ruby R53 (https://github.com/ruby-R53)"
		;;

	# didn't even input a valid action or wants to know
	# them?
	"help" | "h" | *)
		echo "Usage: $0 <action> [package]"
		echo "Actions:"
		echo "help | h               - shows this help message"
		echo "update | u             - git pull every package listed in pkg.list"
		echo "install | i <pkg>      - install <pkg> using \$FPKGDIR/ii/<pkg>.ii"
		echo "remove | r <pkg>       - uninstall <pkg> using \$FPKGDIR/ii/<pkg>.ii also"
		echo "list | l               - list registered packages"
		echo "add | a <pkg>          - register <pkg>"
		echo "peek | p <pkg>         - take a peek at <pkg>'s .ii"
		echo "goto | g <pkg>         - go to <pkg>'s directory"
		echo "edit | e <pkg>         - edit <pkg>'s ii file"
		echo "delete | d <pkg>       - remove <pkg>"
		echo "message | m [-d] <pkg> - get comment from last commit of <pkg>. Takes an"
		echo "                         optional -d for getting its diff"
		echo "version | v            - get fpkg's version"

		# exit with error if input wasn't
		# for the help text
		if [[ $1 != "help" ]]; then
			quit 1
		fi
		;;
esac

# and the program is done!
quit 0
